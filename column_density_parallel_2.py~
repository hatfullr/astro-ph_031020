import numpy as np
from scipy.integrate import simps
import matplotlib.pyplot as plt
import time
from multiprocessing import Pool

def coldens(z,rho,x_idxs,Nz,Ny):
    # x_idxs is a 1D array of the indices in the x array to calculate for
    result = np.zeros(shape=(len(x_idxs),Ny))
    for i in range(0,len(x_idxs)):
        for j in range(0,Ny):
            idx = indices_to_1D(x_idxs[i],j,Ny,Nz)
            result[i][j] = simps(rho[idx:idx+Nz],x=z[idx:idx+Nz])
    return result,x_idxs

def indices_to_1D(x_idx,y_idx,Ny,Nz):
    return x_idx*Nz*Ny + y_idx*Nz

if __name__ == "__main__":
    data = np.loadtxt("cloud.dat")
    x = data[:,0]
    y = data[:,1]
    z = data[:,2]
    rho = data[:,3]

    xmin = np.amin(x)
    xmax = np.amax(x)
    ymin = np.amin(y)
    ymax = np.amax(y)
    zmin = np.amin(z)
    zmax = np.amax(z)

    x_uniq = np.unique(x)
    y_uniq = np.unique(y)
    z_uniq = np.unique(z)

    Nx = len(x_uniq)
    Ny = len(y_uniq)
    Nz = len(z_uniq)

    colden = np.zeros(shape=(Nx,Ny))

    xidxs = np.arange(Nx)

    pool = Pool()
    nprocs = pool._processes
    print("nprocs =",nprocs)

    # Just split up processes for the x direction

    x_chunks = np.array_split(xidxs,nprocs)

    procs = [None]*nprocs
    for i in range(0,nprocs):
        procs[i] = pool.apply_async(coldens,args=(z,rho,x_chunks[i],Nz,Ny))

    start = time.time()
    for i in range(0,nprocs):
        rho_temp, idxs = procs[i].get()
        colden[idxs] = rho_temp

    print(time.time()-start)
    pool.close()

    plt.imshow(np.log10(colden),extent=(xmin,xmax,ymin,ymax))
    plt.subplots_adjust(left=0.05,right=0.95,top=0.95,bottom=0.05)
    ax = plt.gca()
    ax.xaxis.set_visible(False)
    ax.yaxis.set_visible(False)
    ax.set_title("log column density")
    ax.spines['left'].set_visible(False)
    ax.spines['right'].set_visible(False)
    ax.spines['top'].set_visible(False)
    ax.spines['bottom'].set_visible(False)
    plt.savefig("gas_cloud.png")
    plt.show()

import numpy as np
import time
from multiprocessing import Pool
from scipy.spatial import distance

def my_cdist(xyz,chunk):
    r = distance.cdist(xyz[chunk],xyz)
    return r, chunk

if __name__ == "__main__":
    N = 1000

    x = np.random.rand(N)
    y = np.random.rand(N)
    z = np.random.rand(N)
    xyz = np.zeros(shape=(N,3)) # Create one big array
    xyz[:,0] = x
    xyz[:,1] = y
    xyz[:,2] = z

    r = np.zeros(shape=(N,N))

    pool = Pool()
    nproc = pool._processes

    chunk = np.array_split(np.arange(N),nproc)
    
    proc = [pool.apply_async(my_cdist,args=(xyz,chunk[i])) for i in range(0,nproc)]

    total = 0
    for t in range(0,3):
        start = time.time()
        for i in range(0,nproc):
            rtemp, chk = proc[i].get()
            r[chk] = rtemp
        total += time.time() - start
    
    pool.close()
    print(total/3.)
    print(r.flatten()[:5])
    print(r.flatten()[-5:])

    total = 0
    for t in range(0,3):
        start = time.time()
        r = distance.cdist(xyz,xyz) # Use .flatten() to get a 1D array
        total += time.time() - start
    print(total/3.)
    print(r.flatten()[:5])
    print(r.flatten()[-5:])

